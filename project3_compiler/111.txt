1: /*
2:  * Example with Functions
3:  */
4: 
5: // variables
<LET>
<MUT>
<id:c>
<';'>
Reducing to [declaration]
Reducing to [declaration_list]
6: let mut c ;
<LET>
<MUT>
<id:a>
<'='>
<int:5>
Reducing to [value_declaration]
<';'>
Reducing to [declaration]
Reducing to [declaration_list]
7: let mut a = 5;
8:     
9: // function declaration
<FN>
Reducing to [external_declaration]
Reducing to [program]
Reducing to [func_expression]
<id:add>
<'('>
<id:a>
<':'>
<INT>
Reducing to [type_specifier]
Reducing to [parameter_declaration]
Reducing to [parameter_list]
<','>
<id:b>
<':'>
<INT>
Reducing to [type_specifier]
Reducing to [parameter_declaration]
Reducing to [parameter_list]
<')'>
<'-'>
<'>'>
<INT>
Reducing to [type_specifier]
10: fn add(a:int, b:int) -> int
<'{'>
Reducing to [block_start]
11: {
<RETURN>
<id:a>
----------const can not change value!----------
Id : a
Now Scope : 1
We get : 0
Reducing to [func_inv]
Reducing to [func_inv_list]
Reducing to [primary_expression]
<'+'>
Reducing to [unary_expression]
Reducing to [multiplicative_expression]
Reducing to [additive_expression]
<id:b>
----------const can not change value!----------
Id : b
Now Scope : 1
We get : 1
Reducing to [func_inv]
Reducing to [func_inv_list]
Reducing to [primary_expression]
<';'>
Reducing to [unary_expression]
Reducing to [multiplicative_expression]
Reducing to [additive_expression]
Reducing to [relational_expression]
Reducing to [equality_expression]
Reducing to [and_expression]
Reducing to [inclusive_expression]
Reducing to [assignment_expression]
Reducing to [expression]
Reducing to [simple_statment]
Reducing to [statment]
Reducing to [statment_list]
12:   return a+b;
<'}'>
Reducing to [block_end]
Reducing to [block_statement]
Reducing to [function_definition]
Reducing to [external_declaration]
Reducing to [program]
13: }
14:     
15: // main function
<FN>
Reducing to [func_expression]
<id:main>
<'('>
<')'>
16: fn main() 
<'{'>
Reducing to [block_start]
17: {
<id:c>
<'='>
<id:add>
----------const can not change value!----------
Id : add
Now Scope : 2
We get : 2
Reducing to [func_inv]
Reducing to [func_inv_list]
Reducing to [primary_expression]
<'('>
<id:a>
----------const can not change value!----------
Id : a
Now Scope : 2
We get : 0
Reducing to [func_inv]
Reducing to [func_inv_list]
<','>
<int:10>
Reducing to [value_declaration]
Reducing to [func_inv]
<')'>
Reducing to [func_inv_list]
Reducing to [primary_expression]
<';'>
Reducing to [unary_expression]
Reducing to [multiplicative_expression]
Reducing to [additive_expression]
Reducing to [relational_expression]
Reducing to [equality_expression]
Reducing to [and_expression]
Reducing to [inclusive_expression]
Reducing to [assignment_expression]
Reducing to [expression]
Reducing to [simple_statment]
Reducing to [statment]
Reducing to [statment_list]
18:   c = add(a, 10);
<IF>
<'('>
<id:c>
----------const can not change value!----------
Id : c
Now Scope : 2
We get : 0
Reducing to [func_inv]
Reducing to [func_inv_list]
Reducing to [primary_expression]
<'>'>
Reducing to [unary_expression]
Reducing to [multiplicative_expression]
Reducing to [additive_expression]
Reducing to [relational_expression]
<int:10>
Reducing to [value_declaration]
Reducing to [func_inv]
Reducing to [func_inv_list]
Reducing to [primary_expression]
<')'>
Reducing to [relational_expression]
Reducing to [equality_expression]
Reducing to [and_expression]
Reducing to [inclusive_expression]
Reducing to [assignment_expression]
Reducing to [expression]
<'{'>
Reducing to [block_start]
19:   if (c > 10) {
<PRINT>
<'-'>
<id:c>
----------const can not change value!----------
Id : c
Now Scope : 3
We get : 0
Reducing to [func_inv]
Reducing to [func_inv_list]
Reducing to [primary_expression]
<';'>
Reducing to [unary_expression]
Reducing to [multiplicative_expression]
Reducing to [additive_expression]
Reducing to [relational_expression]
Reducing to [equality_expression]
Reducing to [and_expression]
Reducing to [inclusive_expression]
Reducing to [assignment_expression]
Reducing to [expression]
Reducing to [simple_statment]
Reducing to [statment]
Reducing to [statment_list]
20:     print -c;
<'}'>
Reducing to [block_end]
Reducing to [block_statement]
Reducing to [statment]
21:   }
<ELSE>
<'{'>
Reducing to [block_start]
22:   else {
<PRINT>
<id:c>
----------const can not change value!----------
Id : c
Now Scope : 3
We get : 0
Reducing to [func_inv]
Reducing to [func_inv_list]
Reducing to [primary_expression]
<';'>
Reducing to [unary_expression]
Reducing to [multiplicative_expression]
Reducing to [additive_expression]
Reducing to [relational_expression]
Reducing to [equality_expression]
Reducing to [and_expression]
Reducing to [inclusive_expression]
Reducing to [assignment_expression]
Reducing to [expression]
Reducing to [simple_statment]
Reducing to [statment]
Reducing to [statment_list]
23:     print c;
<'}'>
Reducing to [block_end]
Reducing to [block_statement]
Reducing to [statment]
Reducing to [selection_statment]
Reducing to [statment]
Reducing to [statment_list]
24:   }
<PRINTLN>
<'('>
<string:Hello World>
Reducing to [value_declaration]
Reducing to [func_inv]
Reducing to [func_inv_list]
<')'>
Reducing to [primary_expression]
Reducing to [unary_expression]
Reducing to [multiplicative_expression]
Reducing to [additive_expression]
Reducing to [relational_expression]
Reducing to [equality_expression]
Reducing to [and_expression]
Reducing to [inclusive_expression]
Reducing to [assignment_expression]
Reducing to [expression]
Reducing to [expression]
<';'>
Reducing to [simple_statment]
Reducing to [statment]
Reducing to [statment_list]
25:   println ("Hello World");
<'}'>
Reducing to [block_end]
Reducing to [block_statement]
Reducing to [function_definition]
Reducing to [external_declaration]
Reducing to [program]
26: }
-----the file is end
